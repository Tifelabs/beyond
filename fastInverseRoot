#include <iostream>
#include <cmath>

float fastInverseSqrt(float number) {
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y = number;
    i = * ( long * ) &y;                       // evil floating point bit level hacking
    i = 0x5f3759df - ( i >> 1 );               // what the fuck? (original comment)
    y = * ( float * ) &i;
    y = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration of Newton-Raphson
    // y = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, can be removed
    
    return y;
}

int main() {
    float number = 4.0f;
    
    // Fast inverse square root
    float fastResult = fastInverseSqrt(number);
    
    // Standard calculation for comparison
    float standardResult = 1.0f / std::sqrt(number);
    
    std::cout << "Number: " << number << std::endl;
    std::cout << "Fast inverse sqrt: " << fastResult << std::endl;
    std::cout << "Standard 1/sqrt(): " << standardResult << std::endl;
    std::cout << "Error: " << std::abs(fastResult - standardResult) << std::endl;
    
    return 0;
}
